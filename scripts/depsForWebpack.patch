diff --git a/node_modules/ansi-styles/index.js b/node_modules/ansi-styles/index.js
index 90a871c..3c9c511 100644
--- a/node_modules/ansi-styles/index.js
+++ b/node_modules/ansi-styles/index.js
@@ -159,7 +159,4 @@ function assembleStyles() {
 }
 
 // Make the export immutable
-Object.defineProperty(module, 'exports', {
-	enumerable: true,
-	get: assembleStyles
-});
+module.exports = assembleStyles();
diff --git a/node_modules/form-data/lib/form_data.js b/node_modules/form-data/lib/form_data.js
index 3a1bb82..01b1ec3 100644
--- a/node_modules/form-data/lib/form_data.js
+++ b/node_modules/form-data/lib/form_data.js
@@ -6,7 +6,7 @@ var https = require('https');
 var parseUrl = require('url').parse;
 var fs = require('fs');
 var mime = require('mime-types');
-var asynckit = require('asynckit');
+var asynckit_parallel = require('asynckit/parallel');
 var populate = require('./populate.js');
 
 // Public API
@@ -372,7 +372,7 @@ FormData.prototype.getLength = function(cb) {
     return;
   }
 
-  asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {
+  asynckit_parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {
     if (err) {
       cb(err);
       return;
diff --git a/node_modules/is-windows/index.js b/node_modules/is-windows/index.js
index 55d43e0..3e49028 100644
--- a/node_modules/is-windows/index.js
+++ b/node_modules/is-windows/index.js
@@ -5,23 +5,7 @@
  * Released under the MIT License.
  */
 
-(function(factory) {
-  if (exports && typeof exports === 'object' && typeof module !== 'undefined') {
-    module.exports = factory();
-  } else if (typeof define === 'function' && define.amd) {
-    define([], factory);
-  } else if (typeof window !== 'undefined') {
-    window.isWindows = factory();
-  } else if (typeof global !== 'undefined') {
-    global.isWindows = factory();
-  } else if (typeof self !== 'undefined') {
-    self.isWindows = factory();
-  } else {
-    this.isWindows = factory();
-  }
-})(function() {
   'use strict';
-  return function isWindows() {
+  module.exports = function isWindows() {
     return process && (process.platform === 'win32' || /^(msys|cygwin)$/.test(process.env.OSTYPE));
   };
-});
diff --git a/node_modules/jsbn/index.js b/node_modules/jsbn/index.js
index 973226d..257b3ab 100644
--- a/node_modules/jsbn/index.js
+++ b/node_modules/jsbn/index.js
@@ -1,4 +1,4 @@
-(function(){
+'use strict';
 
     // Copyright (c) 2005  Tom Wu
     // All Rights Reserved.
@@ -1347,11 +1347,4 @@
 
   BigInteger.SecureRandom = SecureRandom;
   BigInteger.BigInteger = BigInteger;
-  if (typeof exports !== 'undefined') {
     exports = module.exports = BigInteger;
-  } else {
-    this.BigInteger = BigInteger;
-    this.SecureRandom = SecureRandom;
-  }
-
-}).call(this);
diff --git a/node_modules/lodash._baseclone/index.js b/node_modules/lodash._baseclone/index.js
index f98f478..6c7e6c3 100644
--- a/node_modules/lodash._baseclone/index.js
+++ b/node_modules/lodash._baseclone/index.js
@@ -83,23 +83,8 @@ var objectTypes = {
   'object': true
 };
 
-/** Detect free variable `exports`. */
-var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)
-  ? exports
-  : undefined;
-
-/** Detect free variable `module`. */
-var freeModule = (objectTypes[typeof module] && module && !module.nodeType)
-  ? module
-  : undefined;
-
-/** Detect the popular CommonJS extension `module.exports`. */
-var moduleExports = (freeModule && freeModule.exports === freeExports)
-  ? freeExports
-  : undefined;
-
 /** Detect free variable `global` from Node.js. */
-var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);
+var freeGlobal = checkGlobal(typeof global == 'object' && global);
 
 /** Detect free variable `self`. */
 var freeSelf = checkGlobal(objectTypes[typeof self] && self);
@@ -319,7 +304,7 @@ var reIsNative = RegExp('^' +
 );
 
 /** Built-in value references. */
-var Buffer = moduleExports ? root.Buffer : undefined,
+var Buffer = root.Buffer,
     Symbol = root.Symbol,
     Uint8Array = root.Uint8Array,
     getOwnPropertySymbols = Object.getOwnPropertySymbols,
diff --git a/node_modules/lodash/_cloneBuffer.js b/node_modules/lodash/_cloneBuffer.js
index 27c4810..b5386d8 100644
--- a/node_modules/lodash/_cloneBuffer.js
+++ b/node_modules/lodash/_cloneBuffer.js
@@ -1,16 +1,7 @@
 var root = require('./_root');
 
-/** Detect free variable `exports`. */
-var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
-
-/** Detect free variable `module`. */
-var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
-
-/** Detect the popular CommonJS extension `module.exports`. */
-var moduleExports = freeModule && freeModule.exports === freeExports;
-
 /** Built-in value references. */
-var Buffer = moduleExports ? root.Buffer : undefined,
+var Buffer = root.Buffer,
     allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;
 
 /**
diff --git a/node_modules/lodash/_nodeUtil.js b/node_modules/lodash/_nodeUtil.js
index 983d78f..be5cd86 100644
--- a/node_modules/lodash/_nodeUtil.js
+++ b/node_modules/lodash/_nodeUtil.js
@@ -1,22 +1,13 @@
 var freeGlobal = require('./_freeGlobal');
 
-/** Detect free variable `exports`. */
-var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
-
-/** Detect free variable `module`. */
-var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
-
-/** Detect the popular CommonJS extension `module.exports`. */
-var moduleExports = freeModule && freeModule.exports === freeExports;
-
 /** Detect free variable `process` from Node.js. */
-var freeProcess = moduleExports && freeGlobal.process;
+var freeProcess = freeGlobal.process;
 
 /** Used to access faster Node.js helpers. */
 var nodeUtil = (function() {
   try {
     // Use `util.types` for Node.js 10+.
-    var types = freeModule && freeModule.require && freeModule.require('util').types;
+    var types = /*module.require &&*/ module.require('util').types;
 
     if (types) {
       return types;
diff --git a/node_modules/lodash/isBuffer.js b/node_modules/lodash/isBuffer.js
index c103cc7..7fab097 100644
--- a/node_modules/lodash/isBuffer.js
+++ b/node_modules/lodash/isBuffer.js
@@ -1,17 +1,8 @@
 var root = require('./_root'),
     stubFalse = require('./stubFalse');
 
-/** Detect free variable `exports`. */
-var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
-
-/** Detect free variable `module`. */
-var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
-
-/** Detect the popular CommonJS extension `module.exports`. */
-var moduleExports = freeModule && freeModule.exports === freeExports;
-
 /** Built-in value references. */
-var Buffer = moduleExports ? root.Buffer : undefined;
+var Buffer = root.Buffer;
 
 /* Built-in method references for those with the same name as other `lodash` methods. */
 var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
diff --git a/node_modules/node-emoji/lib/emoji.js b/node_modules/node-emoji/lib/emoji.js
index 0aac29b..2968fda 100644
--- a/node_modules/node-emoji/lib/emoji.js
+++ b/node_modules/node-emoji/lib/emoji.js
@@ -1,9 +1,9 @@
 /*jslint node: true*/
+"use strict";
+
 var toArray = require('lodash.toarray');
 var emojiByName = require('./emoji.json');
 
-"use strict";
-
 /**
  * regex to parse emoji in a string - finds emoji, e.g. :coffee:
  */
diff --git a/node_modules/object-path/index.js b/node_modules/object-path/index.js
index bba7e3d..ecbe06b 100644
--- a/node_modules/object-path/index.js
+++ b/node_modules/object-path/index.js
@@ -1,17 +1,3 @@
-(function (root, factory){
-  'use strict';
-
-  /*istanbul ignore next:cant test*/
-  if (typeof module === 'object' && typeof module.exports === 'object') {
-    module.exports = factory();
-  } else if (typeof define === 'function' && define.amd) {
-    // AMD. Register as an anonymous module.
-    define([], factory);
-  } else {
-    // Browser globals
-    root.objectPath = factory();
-  }
-})(this, function(){
   'use strict';
 
   var toStr = Object.prototype.toString;
@@ -288,5 +274,4 @@
   var mod = factory();
   mod.create = factory;
   mod.withInheritedProps = factory({includeInheritedProps: true})
-  return mod;
-});
+  module.exports = mod;
diff --git a/node_modules/puka/index.js b/node_modules/puka/index.js
index b3a4974..66b0f3f 100644
--- a/node_modules/puka/index.js
+++ b/node_modules/puka/index.js
@@ -597,9 +597,7 @@ class ShellString {
    * @memberof ShellString
    */
   static sh(templateSpans) {
-    for (var _len = arguments.length, values = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
-      values[_key - 1] = arguments[_key];
-    }
+    var values = Array.prototype.slice.call(arguments, 1);
     return new ShellString(evaluate(parse(templateSpans), values));
   }
   /**
diff --git a/node_modules/request-capture-har/request-capture-har.js b/node_modules/request-capture-har/request-capture-har.js
index a996520..007bcf6 100644
--- a/node_modules/request-capture-har/request-capture-har.js
+++ b/node_modules/request-capture-har/request-capture-har.js
@@ -1,5 +1,6 @@
+'use strict';
 var fs = require('fs');
-var pkg = require('./package.json');
+var pkg_version = require('./package.json').version;
 
 function buildHarHeaders (headers) {
   return headers ? Object.keys(headers).map(function (key) {
@@ -57,7 +58,7 @@ HarWrapper.prototype.saveHar = function (fileName) {
   var httpArchive = {
     log: {
       version: '1.2',
-      creator: {name: 'request-capture-har', version: pkg.version},
+      creator: {name: 'request-capture-har', version: pkg_version},
       pages: [{
         startedDateTime: new Date(this.earliestTime).toISOString(),
         id: 'request-capture-har',
diff --git a/node_modules/strip-ansi/index.js b/node_modules/strip-ansi/index.js
index 96e0292..65aef90 100644
--- a/node_modules/strip-ansi/index.js
+++ b/node_modules/strip-ansi/index.js
@@ -1,4 +1,4 @@
 'use strict';
-const ansiRegex = require('ansi-regex');
+var ansiRegex = require('ansi-regex');
 
 module.exports = input => typeof input === 'string' ? input.replace(ansiRegex(), '') : input;
diff --git a/node_modules/tweetnacl/nacl-fast.js b/node_modules/tweetnacl/nacl-fast.js
index 5e4562f..ba9ec1b 100644
--- a/node_modules/tweetnacl/nacl-fast.js
+++ b/node_modules/tweetnacl/nacl-fast.js
@@ -1,5 +1,5 @@
-(function(nacl) {
 'use strict';
+var nacl = module.exports;
 
 // Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
 // Public domain.
@@ -2384,5 +2384,3 @@ nacl.setPRNG = function(fn) {
     }
   }
 })();
-
-})(typeof module !== 'undefined' && module.exports ? module.exports : (self.nacl = self.nacl || {}));
diff --git a/node_modules/yarn/src/cli/commands/config.js b/node_modules/yarn/src/cli/commands/config.js
index d884c2c..94e73a2 100644
--- a/node_modules/yarn/src/cli/commands/config.js
+++ b/node_modules/yarn/src/cli/commands/config.js
@@ -38,6 +38,8 @@ const CONFIG_KEYS = [
   'cacheFolder',
   'tempFolder',
   'production',
+  'packageDateLimit',
+  'disableWrappersFolder',
 ];
 
 export function hasWrapper(flags: Object, args: Array<string>): boolean {
diff --git a/node_modules/yarn/src/cli/index.js b/node_modules/yarn/src/cli/index.js
index 4348adb..5aa5224 100644
--- a/node_modules/yarn/src/cli/index.js
+++ b/node_modules/yarn/src/cli/index.js
@@ -26,7 +26,8 @@ import handleSignals from '../util/signal-handler.js';
 import {boolify, boolifyWithDefault} from '../util/conversion.js';
 import {ProcessTermError} from '../errors';
 
-process.stdout.prependListener('error', err => {
+const fn = typeof process.stdout.prependListener === 'function' ? 'prependListener' : 'on';
+process.stdout[fn]('error', err => {
   // swallow err only if downstream consumer process closed pipe early
   if (err.code === 'EPIPE' || err.code === 'ERR_STREAM_DESTROYED') {
     return;
@@ -135,6 +136,7 @@ export async function main({
   commander.option('--no-node-version-check', 'do not warn when using a potentially unsupported Node version');
   commander.option('--focus', 'Focus on a single workspace by installing remote copies of its sibling workspaces.');
   commander.option('--otp <otpcode>', 'one-time password for two factor authentication');
+  commander.option('--package-date-limit <time>', 'only install package version that have release date before this');
 
   // if -v is the first command, then always exit after returning the version
   if (args[0] === '-v') {
@@ -558,6 +560,7 @@ export async function main({
       updateChecksums: commander.updateChecksums,
       focus: commander.focus,
       otp: commander.otp,
+      packageDateLimit: commander.packageDateLimit,
     })
     .then(() => {
       // lockfile check must happen after config.init sets lockfileFolder
diff --git a/node_modules/yarn/src/config.js b/node_modules/yarn/src/config.js
index caf3d24..c52d7bc 100644
--- a/node_modules/yarn/src/config.js
+++ b/node_modules/yarn/src/config.js
@@ -70,6 +70,8 @@ export type ConfigOptions = {
   focus?: boolean,
 
   otp?: string,
+  packageDateLimit?: ?string,
+  disableWrappersFolder?: boolean,
 };
 
 type PackageMetadata = {
@@ -205,6 +207,8 @@ export default class Config {
   autoAddIntegrity: boolean;
 
   otp: ?string;
+  packageDateLimit: ?string;
+  disableWrappersFolder: boolean;
 
   /**
    * Execute a promise produced by factory if it doesn't exist in our cache with
@@ -344,6 +348,9 @@ export default class Config {
       networkTimeout: this.networkTimeout,
     });
 
+    this.packageDateLimit = opts.packageDateLimit || String(this.getOption('package-date-limit') || '') || null;
+    this.disableWrappersFolder = Boolean(this.getOption('disable-wrappers-folder'));
+
     this.globalFolder = opts.globalFolder || String(this.getOption('global-folder', true));
     if (this.globalFolder === 'undefined') {
       this.globalFolder = constants.GLOBAL_MODULE_DIRECTORY;
@@ -825,7 +832,7 @@ export default class Config {
       ),
     );
 
-    for (const file of new Set([].concat(...files))) {
+    for (const file of new Set(Array.prototype.concat.apply([], files))) {
       const loc = path.join(root, path.dirname(file));
       const manifest = await this.findManifest(loc, false);
 
diff --git a/node_modules/yarn/src/errors.js b/node_modules/yarn/src/errors.js
index 152326b..cf7085c 100644
--- a/node_modules/yarn/src/errors.js
+++ b/node_modules/yarn/src/errors.js
@@ -21,8 +21,12 @@ export class ProcessSpawnError extends MessageError {
 export class SecurityError extends MessageError {}
 
 export class ProcessTermError extends MessageError {
-  EXIT_CODE: ?number;
-  EXIT_SIGNAL: ?string;
+  constructor(msg: string, code?: string) {
+    super(msg, code);
+  }
+
+  EXIT_CODE: ?number = undefined;
+  EXIT_SIGNAL: ?string = undefined;
 }
 
 export class ResponseError extends Error {
diff --git a/node_modules/yarn/src/fetchers/tarball-fetcher.js b/node_modules/yarn/src/fetchers/tarball-fetcher.js
index c06cc11..bed388f 100644
--- a/node_modules/yarn/src/fetchers/tarball-fetcher.js
+++ b/node_modules/yarn/src/fetchers/tarball-fetcher.js
@@ -41,6 +41,10 @@ const isHashAlgorithmSupported = name => {
 isHashAlgorithmSupported.__cache = {};
 
 export default class TarballFetcher extends BaseFetcher {
+  constructor(dest: string, remote: PackageRemote, config: Config) {
+    super(dest, remote, config);
+  }
+
   validateError: ?Object = null;
   validateIntegrity: ?Object = null;
   async setupMirrorFromCache(): Promise<?string> {
diff --git a/node_modules/yarn/src/lockfile/parse.js b/node_modules/yarn/src/lockfile/parse.js
index 8a63ff1..da38598 100644
--- a/node_modules/yarn/src/lockfile/parse.js
+++ b/node_modules/yarn/src/lockfile/parse.js
@@ -72,7 +72,7 @@ function* tokenise(input: string): Iterator<Token> {
       chop++;
 
       let nextNewline = input.indexOf('\n', chop);
-      if (nextNewline === -1) {
+      if (nextNewline < 0) {
         nextNewline = input.length;
       }
       const val = input.substring(chop, nextNewline);
@@ -385,28 +385,20 @@ function parse(str: string, fileLoc: string): Object {
   const parser = new Parser(str, fileLoc);
   parser.next();
 
-  if (!fileLoc.endsWith(`.yml`)) {
+  let error: any;
+  if (!fileLoc.endsWith('.yml')) {
     try {
       return parser.parse();
-    } catch (error1) {
-      try {
-        return safeLoad(str, {
-          schema: FAILSAFE_SCHEMA,
-        });
-      } catch (error2) {
-        throw error1;
-      }
-    }
-  } else {
-    const result = safeLoad(str, {
-      schema: FAILSAFE_SCHEMA,
-    });
-    if (typeof result === 'object') {
-      return result;
-    } else {
-      return {};
+    } catch (err) {
+      error = err;
     }
   }
+  try {
+    const result = safeLoad(str, {schema: FAILSAFE_SCHEMA});
+    return typeof result === 'object' ? result : {};
+  } catch (err) {
+    throw error || err;
+  }
 }
 
 /**
diff --git a/node_modules/yarn/src/package-hoister.js b/node_modules/yarn/src/package-hoister.js
index dc89900..ee13f67 100644
--- a/node_modules/yarn/src/package-hoister.js
+++ b/node_modules/yarn/src/package-hoister.js
@@ -935,7 +935,7 @@ export class NohoistResolver {
   /**
    * examine the top level packages to find the root package
    */
-  initNohoist = (info: HoistManifest, parent: ?HoistManifest) => {
+  initNohoist(info: HoistManifest, parent: ?HoistManifest) {
     let parentNohoistList: ?Array<string>;
     let originalParentPath: string = info.originalParentPath;
 
@@ -957,7 +957,7 @@ export class NohoistResolver {
     }
     info.nohoistList = nohoistList.length > 0 ? nohoistList : null;
     info.isNohoist = this._isNohoist(info);
-  };
+  }
 
   /**
    * find the highest hoisting point for the given HoistManifest.
@@ -967,12 +967,12 @@ export class NohoistResolver {
    *
    */
 
-  highestHoistingPoint = (info: HoistManifest): ?number => {
+  highestHoistingPoint(info: HoistManifest): ?number {
     return info.isNohoist && info.parts.length > 1 ? 1 : null;
-  };
+  }
 
   // private functions
-  _isNohoist = (info: HoistManifest): boolean => {
+  _isNohoist(info: HoistManifest): boolean {
     if (this._isTopPackage(info)) {
       return false;
     }
@@ -983,33 +983,33 @@ export class NohoistResolver {
       return true;
     }
     return false;
-  };
-  _isRootPackage = (pkg: Manifest): boolean => {
+  }
+  _isRootPackage(pkg: Manifest): boolean {
     return pkg.name === this._wsRootPackageName;
-  };
-  _originalPath = (info: HoistManifest): string => {
+  }
+  _originalPath(info: HoistManifest): string {
     return this._makePath(info.originalParentPath, info.pkg.name);
-  };
+  }
   _makePath(...args: Array<string>): string {
     const parts = args.map(s => (s === this._wsRootPackageName ? WS_ROOT_ALIAS : s));
     const result = parts.join('/');
     return result[0] === '/' ? result : '/' + result;
   }
-  _isTopPackage = (info: HoistManifest): boolean => {
+  _isTopPackage(info: HoistManifest): boolean {
     const parentParts = info.parts.slice(0, -1);
     const result =
       !parentParts ||
       parentParts.length <= 0 ||
       (parentParts.length === 1 && parentParts[0] === this._wsRootPackageName);
     return result;
-  };
-  _isLink = (info: HoistManifest): boolean => {
+  }
+  _isLink(info: HoistManifest): boolean {
     return info.pkg._remote != null && LINK_TYPES.has(info.pkg._remote.type);
-  };
+  }
 
   // extract nohoist from package.json then prefix them with branch path
   // so we can matched against the branch tree ("originalPath") later
-  _extractNohoistList = (pkg: Manifest, pathPrefix: string): ?Array<string> => {
+  _extractNohoistList(pkg: Manifest, pathPrefix: string): ?Array<string> {
     let nohoistList: ?Array<string>;
     const ws = this._config.getWorkspaces(pkg);
 
@@ -1017,7 +1017,7 @@ export class NohoistResolver {
       nohoistList = ws.nohoist.map(p => this._makePath(pathPrefix, p));
     }
     return nohoistList;
-  };
+  }
 }
 
 export type HoistManifestTuple = [string, HoistManifest];
diff --git a/node_modules/yarn/src/resolvers/registries/npm-resolver.js b/node_modules/yarn/src/resolvers/registries/npm-resolver.js
index 3cd99a0..3ce73c3 100644
--- a/node_modules/yarn/src/resolvers/registries/npm-resolver.js
+++ b/node_modules/yarn/src/resolvers/registries/npm-resolver.js
@@ -24,6 +24,7 @@ type RegistryResponse = {
   name: string,
   versions: {[key: string]: Manifest},
   'dist-tags': {[key: string]: string},
+  time?: ?{[key: string]: ?string},
 };
 
 export default class NpmResolver extends RegistryResolver {
@@ -48,6 +49,25 @@ export default class NpmResolver extends RegistryResolver {
       range = body['dist-tags'][range];
     }
 
+    // Only install package version that have release date before a specified one.
+    // That date string must match JSON format, e.g. 2020-08-14T04:47:38.210Z
+    if (config.packageDateLimit && body.time) {
+      const releaseDates = body.time;
+      let closestVersion = null;
+      (semver: Object).rsort(Object.keys(body.versions)).some(v => {
+        if (releaseDates[v] && semver.satisfies(v, range)) {
+          closestVersion = v;
+          if (releaseDates[v] < config.packageDateLimit) {
+            return true;
+          }
+        }
+        return false;
+      });
+      if (closestVersion) {
+        return body.versions[closestVersion];
+      }
+    }
+
     // If the latest tag in the registry satisfies the requested range, then use that.
     // Otherwise we will fall back to semver maxSatisfying.
     // This mimics logic in NPM. See issue #3560
@@ -94,7 +114,7 @@ export default class NpmResolver extends RegistryResolver {
 
     const escapedName = NpmRegistry.escapeName(this.name);
     const desiredRange = desiredVersion || this.range;
-    const body = await this.config.registries.npm.request(escapedName);
+    const body = await this.config.registries.npm.request(escapedName, {unfiltered: !!this.config.packageDateLimit});
 
     if (body) {
       return NpmResolver.findVersionInRegistryResponse(this.config, escapedName, desiredRange, body, this.request);
diff --git a/node_modules/yarn/src/util/dynamic-require.js b/node_modules/yarn/src/util/dynamic-require.js
index 0fef3c6..74f2eba 100644
--- a/node_modules/yarn/src/util/dynamic-require.js
+++ b/node_modules/yarn/src/util/dynamic-require.js
@@ -1,4 +1,4 @@
 /* @flow */
 
 // $FlowFixMe We want this require to be dynamic
-exports.dynamicRequire = typeof __webpack_require__ !== 'undefined' ? __non_webpack_require__ : require; // eslint-disable-line
+export const dynamicRequire = typeof __webpack_require__ !== 'undefined' ? __non_webpack_require__ : require; // eslint-disable-line
diff --git a/node_modules/yarn/src/util/execute-lifecycle-script.js b/node_modules/yarn/src/util/execute-lifecycle-script.js
index f5db082..11ade90 100644
--- a/node_modules/yarn/src/util/execute-lifecycle-script.js
+++ b/node_modules/yarn/src/util/execute-lifecycle-script.js
@@ -234,6 +234,7 @@ export async function makeEnv(
     env.NODE_OPTIONS = `--require ${pnpFile} ${env.NODE_OPTIONS}`;
   }
 
+  if (!config.disableWrappersFolder)
   pathParts.unshift(await getWrappersFolder(config));
 
   // join path back together
diff --git a/node_modules/yarn/src/util/promise.js b/node_modules/yarn/src/util/promise.js
index bb80f65..e0ed9ed 100644
--- a/node_modules/yarn/src/util/promise.js
+++ b/node_modules/yarn/src/util/promise.js
@@ -9,16 +9,16 @@ export function wait(delay: number): Promise<void> {
 export function promisify(fn: Function, firstData?: boolean): (...args: Array<any>) => Promise<any> {
   return function(...args): Promise<any> {
     return new Promise(function(resolve, reject) {
-      args.push(function(err, ...result) {
-        let res = result;
-
-        if (result.length <= 1) {
-          res = result[0];
-        }
+      args.push(function(err) {
+        let res: any;
 
         if (firstData) {
           res = err;
           err = null;
+        } else if (arguments.length <= 2) {
+          res = arguments[1];
+        } else {
+          res = Array.prototype.slice.call(arguments, 1);
         }
 
         if (err) {
diff --git a/node_modules/yarn/src/util/semver.js b/node_modules/yarn/src/util/semver.js
index d7373d0..5268d75 100644
--- a/node_modules/yarn/src/util/semver.js
+++ b/node_modules/yarn/src/util/semver.js
@@ -1,6 +1,7 @@
 /* @flow */
 
-import semver, {type Release} from 'semver';
+import type {Release} from 'semver';
+const semver = require('semver');
 
 /**
  * Returns whether the given semver version satisfies the given range. Notably this supports
