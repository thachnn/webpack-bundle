diff --git a/node_modules/is-windows/index.js b/node_modules/is-windows/index.js
index 55d43e0..3e49028 100644
--- a/node_modules/is-windows/index.js
+++ b/node_modules/is-windows/index.js
@@ -5,23 +5,7 @@
  * Released under the MIT License.
  */
 
-(function(factory) {
-  if (exports && typeof exports === 'object' && typeof module !== 'undefined') {
-    module.exports = factory();
-  } else if (typeof define === 'function' && define.amd) {
-    define([], factory);
-  } else if (typeof window !== 'undefined') {
-    window.isWindows = factory();
-  } else if (typeof global !== 'undefined') {
-    global.isWindows = factory();
-  } else if (typeof self !== 'undefined') {
-    self.isWindows = factory();
-  } else {
-    this.isWindows = factory();
-  }
-})(function() {
   'use strict';
-  return function isWindows() {
+  module.exports = function isWindows() {
     return process && (process.platform === 'win32' || /^(msys|cygwin)$/.test(process.env.OSTYPE));
   };
-});
diff --git a/node_modules/object-path/index.js b/node_modules/object-path/index.js
index bba7e3d..ecbe06b 100644
--- a/node_modules/object-path/index.js
+++ b/node_modules/object-path/index.js
@@ -1,17 +1,3 @@
-(function (root, factory){
-  'use strict';
-
-  /*istanbul ignore next:cant test*/
-  if (typeof module === 'object' && typeof module.exports === 'object') {
-    module.exports = factory();
-  } else if (typeof define === 'function' && define.amd) {
-    // AMD. Register as an anonymous module.
-    define([], factory);
-  } else {
-    // Browser globals
-    root.objectPath = factory();
-  }
-})(this, function(){
   'use strict';
 
   var toStr = Object.prototype.toString;
@@ -288,5 +274,4 @@
   var mod = factory();
   mod.create = factory;
   mod.withInheritedProps = factory({includeInheritedProps: true})
-  return mod;
-});
+  module.exports = mod;
diff --git a/node_modules/ansi-styles/index.js b/node_modules/ansi-styles/index.js
index 90a871c..3c9c511 100644
--- a/node_modules/ansi-styles/index.js
+++ b/node_modules/ansi-styles/index.js
@@ -159,7 +159,4 @@ function assembleStyles() {
 }
 
 // Make the export immutable
-Object.defineProperty(module, 'exports', {
-	enumerable: true,
-	get: assembleStyles
-});
+module.exports = assembleStyles();
diff --git a/node_modules/request-capture-har/request-capture-har.js b/node_modules/request-capture-har/request-capture-har.js
index a996520..da5ee04 100644
--- a/node_modules/request-capture-har/request-capture-har.js
+++ b/node_modules/request-capture-har/request-capture-har.js
@@ -1,5 +1,5 @@
 var fs = require('fs');
-var pkg = require('./package.json');
+var pkgVersion = require('./package.json').version;
 
 function buildHarHeaders (headers) {
   return headers ? Object.keys(headers).map(function (key) {
@@ -57,7 +57,7 @@ HarWrapper.prototype.saveHar = function (fileName) {
   var httpArchive = {
     log: {
       version: '1.2',
-      creator: {name: 'request-capture-har', version: pkg.version},
+      creator: {name: 'request-capture-har', version: pkgVersion},
       pages: [{
         startedDateTime: new Date(this.earliestTime).toISOString(),
         id: 'request-capture-har',
diff --git a/node_modules/yarn/src/util/yarn-version.js b/node_modules/yarn/src/util/yarn-version.js
index 6e458b7..0d21cf7 100644
--- a/node_modules/yarn/src/util/yarn-version.js
+++ b/node_modules/yarn/src/util/yarn-version.js
@@ -9,7 +9,7 @@ import fs from 'fs';
 import path from 'path';
 
 // This will be bundled directly in the .js file for production builds
-const {version, installationMethod: originalInstallationMethod} = require('../../package.json');
+import {version, installationMethod as originalInstallationMethod} from '../../package.json';
 export {version};
 
 export async function getInstallationMethod(): Promise<InstallationMethod> {
diff --git a/node_modules/tweetnacl/nacl-fast.js b/node_modules/tweetnacl/nacl-fast.js
index 5e4562f..ba9ec1b 100644
--- a/node_modules/tweetnacl/nacl-fast.js
+++ b/node_modules/tweetnacl/nacl-fast.js
@@ -1,5 +1,5 @@
-(function(nacl) {
 'use strict';
+var nacl = module.exports;
 
 // Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
 // Public domain.
@@ -2384,5 +2384,3 @@ nacl.setPRNG = function(fn) {
     }
   }
 })();
-
-})(typeof module !== 'undefined' && module.exports ? module.exports : (self.nacl = self.nacl || {}));
diff --git a/node_modules/json-schema/lib/validate.js b/node_modules/json-schema/lib/validate.js
index 4d0b537..6f090c6 100644
--- a/node_modules/json-schema/lib/validate.js
+++ b/node_modules/json-schema/lib/validate.js
@@ -13,22 +13,6 @@ empty list will be returned. A validation error will have two properties:
 "property" which indicates which property had the error
 "message" which indicates what the error was
  */
-(function (root, factory) {
-    if (typeof define === 'function' && define.amd) {
-        // AMD. Register as an anonymous module.
-        define([], function () {
-            return factory();
-        });
-    } else if (typeof module === 'object' && module.exports) {
-        // Node. Does not work with strict CommonJS, but
-        // only CommonJS-like environments that support module.exports,
-        // like Node.
-        module.exports = factory();
-    } else {
-        // Browser globals
-        root.jsonSchema = factory();
-    }
-}(this, function () {// setup primitive classes to be JSON Schema types
 var exports = validate
 exports.Integer = {type:"integer"};
 var primitiveConstructors = {
@@ -269,5 +253,4 @@ exports.mustBeValid = function(result){
 	}
 }
 
-return exports;
-}));
+module.exports = exports;
diff --git a/node_modules/jsbn/index.js b/node_modules/jsbn/index.js
index 973226d..c4b2d2f 100644
--- a/node_modules/jsbn/index.js
+++ b/node_modules/jsbn/index.js
@@ -1,4 +1,3 @@
-(function(){
 
     // Copyright (c) 2005  Tom Wu
     // All Rights Reserved.
@@ -1347,11 +1346,4 @@
 
   BigInteger.SecureRandom = SecureRandom;
   BigInteger.BigInteger = BigInteger;
-  if (typeof exports !== 'undefined') {
     exports = module.exports = BigInteger;
-  } else {
-    this.BigInteger = BigInteger;
-    this.SecureRandom = SecureRandom;
-  }
-
-}).call(this);
diff --git a/node_modules/yarn/src/cli/commands/config.js b/node_modules/yarn/src/cli/commands/config.js
index d884c2c..94e73a2 100644
--- a/node_modules/yarn/src/cli/commands/config.js
+++ b/node_modules/yarn/src/cli/commands/config.js
@@ -38,6 +38,8 @@ const CONFIG_KEYS = [
   'cacheFolder',
   'tempFolder',
   'production',
+  'packageDateLimit',
+  'disableWrappersFolder',
 ];
 
 export function hasWrapper(flags: Object, args: Array<string>): boolean {
diff --git a/node_modules/yarn/src/cli/index.js b/node_modules/yarn/src/cli/index.js
index 4348adb..5242bf2 100644
--- a/node_modules/yarn/src/cli/index.js
+++ b/node_modules/yarn/src/cli/index.js
@@ -135,6 +135,7 @@ export async function main({
   commander.option('--no-node-version-check', 'do not warn when using a potentially unsupported Node version');
   commander.option('--focus', 'Focus on a single workspace by installing remote copies of its sibling workspaces.');
   commander.option('--otp <otpcode>', 'one-time password for two factor authentication');
+  commander.option('--package-date-limit <time>', 'only install package version that have release date before this');
 
   // if -v is the first command, then always exit after returning the version
   if (args[0] === '-v') {
@@ -558,6 +559,7 @@ export async function main({
       updateChecksums: commander.updateChecksums,
       focus: commander.focus,
       otp: commander.otp,
+      packageDateLimit: commander.packageDateLimit,
     })
     .then(() => {
       // lockfile check must happen after config.init sets lockfileFolder
diff --git a/node_modules/yarn/src/config.js b/node_modules/yarn/src/config.js
index caf3d24..2ecbe41 100644
--- a/node_modules/yarn/src/config.js
+++ b/node_modules/yarn/src/config.js
@@ -70,6 +70,8 @@ export type ConfigOptions = {
   focus?: boolean,
 
   otp?: string,
+  packageDateLimit?: ?string,
+  disableWrappersFolder?: boolean,
 };
 
 type PackageMetadata = {
@@ -205,6 +207,8 @@ export default class Config {
   autoAddIntegrity: boolean;
 
   otp: ?string;
+  packageDateLimit: ?string;
+  disableWrappersFolder: boolean;
 
   /**
    * Execute a promise produced by factory if it doesn't exist in our cache with
@@ -344,6 +348,9 @@ export default class Config {
       networkTimeout: this.networkTimeout,
     });
 
+    this.packageDateLimit = opts.packageDateLimit || String(this.getOption('package-date-limit') || '') || null;
+    this.disableWrappersFolder = Boolean(this.getOption('disable-wrappers-folder'));
+
     this.globalFolder = opts.globalFolder || String(this.getOption('global-folder', true));
     if (this.globalFolder === 'undefined') {
       this.globalFolder = constants.GLOBAL_MODULE_DIRECTORY;
diff --git a/node_modules/yarn/src/resolvers/registries/npm-resolver.js b/node_modules/yarn/src/resolvers/registries/npm-resolver.js
index 3cd99a0..3ce73c3 100644
--- a/node_modules/yarn/src/resolvers/registries/npm-resolver.js
+++ b/node_modules/yarn/src/resolvers/registries/npm-resolver.js
@@ -24,6 +24,7 @@ type RegistryResponse = {
   name: string,
   versions: {[key: string]: Manifest},
   'dist-tags': {[key: string]: string},
+  time?: ?{[key: string]: ?string},
 };
 
 export default class NpmResolver extends RegistryResolver {
@@ -48,6 +49,25 @@ export default class NpmResolver extends RegistryResolver {
       range = body['dist-tags'][range];
     }
 
+    // Only install package version that have release date before a specified one.
+    // That date string must match JSON format, e.g. 2020-08-14T04:47:38.210Z
+    if (config.packageDateLimit && body.time) {
+      const releaseDates = body.time;
+      let closestVersion = null;
+      (semver: Object).rsort(Object.keys(body.versions)).some(v => {
+        if (releaseDates[v] && semver.satisfies(v, range)) {
+          closestVersion = v;
+          if (releaseDates[v] < config.packageDateLimit) {
+            return true;
+          }
+        }
+        return false;
+      });
+      if (closestVersion) {
+        return body.versions[closestVersion];
+      }
+    }
+
     // If the latest tag in the registry satisfies the requested range, then use that.
     // Otherwise we will fall back to semver maxSatisfying.
     // This mimics logic in NPM. See issue #3560
@@ -94,7 +114,7 @@ export default class NpmResolver extends RegistryResolver {
 
     const escapedName = NpmRegistry.escapeName(this.name);
     const desiredRange = desiredVersion || this.range;
-    const body = await this.config.registries.npm.request(escapedName);
+    const body = await this.config.registries.npm.request(escapedName, {unfiltered: !!this.config.packageDateLimit});
 
     if (body) {
       return NpmResolver.findVersionInRegistryResponse(this.config, escapedName, desiredRange, body, this.request);
diff --git a/node_modules/yarn/src/util/execute-lifecycle-script.js b/node_modules/yarn/src/util/execute-lifecycle-script.js
index f5db082..a9af325 100644
--- a/node_modules/yarn/src/util/execute-lifecycle-script.js
+++ b/node_modules/yarn/src/util/execute-lifecycle-script.js
@@ -234,7 +234,9 @@ export async function makeEnv(
     env.NODE_OPTIONS = `--require ${pnpFile} ${env.NODE_OPTIONS}`;
   }
 
-  pathParts.unshift(await getWrappersFolder(config));
+  if (!config.disableWrappersFolder) {
+    pathParts.unshift(await getWrappersFolder(config));
+  }
 
   // join path back together
   env[constants.ENV_PATH_KEY] = pathParts.join(path.delimiter);
